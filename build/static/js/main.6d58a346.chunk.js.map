{"version":3,"sources":["serviceWorker.js","Modules/Dummy/dummy.js","Modules/PageNotFound/PageNotFound.js","Constants/ServiceConstants.js","Services/UserService.js","Modules/Users/ForgetPasswordPage/ForgetPassword.js","Components/Toaster/toaster.js","Modules/Users/SignUpPage/signup.js","Modules/Users/LoginPage/login.js","Modules/Users/OtpVerification/otpVerification.js","routes/routes.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","DummyPage","handleClick","localStorage","removeItem","props","history","push","onClick","this","Component","PageNotFound","userServiceVariables","UserService","type","data","axios","post","ForgetPasswordPage","handleSendOtp","value","otpService","userService","then","res","console","log","userData","email","catch","err","otpError","Fragment","justify","lg","className","src","alt","name","initialValues","remember","onFinish","onFinishFailed","Item","rules","required","message","prefix","UserOutlined","placeholder","goBack","htmlType","ErrorNotification","error","SuccessNotification","success","SignUpPage","handleSignup","signupServive","response","signupError","LockOutlined","to","LoginPage","login","alert","setState","isLoading","setItem","JSON","stringify","user","loginError","handleChange","e","target","state","onChange","loading","otpVerification","handleOtp","otp","userDetails","maxLength","MainRoutes","path","component","App","RouteWithAuth","withRouter","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d58a346.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass DummyPage extends Component {\r\n    handleClick = () => {\r\n        localStorage.removeItem('User');\r\n        this.props.history.push('/login');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.handleClick}>Logout</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DummyPage;","import React, { Component } from 'react';\r\n\r\nclass PageNotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                PageNotFound\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PageNotFound","const URL = `http://localhost:9000`;\r\n\r\nconst userServiceVariables = {\r\n    Login: \"Login\",\r\n    Signup: \"Signup\",\r\n    Otp_Verification: \"Otp_Verification\",\r\n    Send_Otp: \"Send_Otp\"\r\n}\r\n\r\nexport { userServiceVariables, URL }","import { userServiceVariables, URL } from \"../Constants/ServiceConstants\";\r\nimport axios from \"axios\";\r\n\r\nexport default class UserService {\r\n    userService(type, data) {\r\n        switch(type) {\r\n            case userServiceVariables.Login:\r\n                return axios.post(`${URL}/users/login`, data);\r\n            case userServiceVariables.Signup:\r\n                return axios.post(`${URL}/users/signup`, data);\r\n            case userServiceVariables.Otp_Verification:\r\n                return axios.post(`${URL}/users/otp`, data);\r\n            case userServiceVariables.Send_Otp:\r\n                return axios.post(`${URL}/users/sendOTP`, data);\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Row, Col, Form, Input, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport UserService from '../../../Services/UserService';\r\nimport { userServiceVariables } from '../../../Constants/ServiceConstants';\r\n\r\nclass ForgetPasswordPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.otpService = new UserService();\r\n    }\r\n    handleSendOtp = (value) => {\r\n        if(value) {\r\n            this.otpService.userService(userServiceVariables.Send_Otp, value).then(res => {\r\n                console.log(\"called\", res.data.userData[0].email);\r\n                this.props.history.push('/otp-verify', {email: res?.data?.userData[0]?.email});\r\n            }).catch(err => {\r\n                console.log(\"called\",err)\r\n            });\r\n        }\r\n    }\r\n\r\n    otpError = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Row justify=\"center\">\r\n                    <Col lg={8} className=\"custom-form\">\r\n                        <img src=\"logo.png\" alt=\"Second-App\" className=\"logo\" />\r\n                        <Form\r\n                            name=\"login\"\r\n                            initialValues={{ remember: true }}\r\n                            onFinish={this.handleSendOtp}\r\n                            onFinishFailed={this.otpError}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please Enter Email Id\"\r\n                                    },\r\n                                    {\r\n                                        type:'email',\r\n                                        message: \"Enter Email Id In Valid Format\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input prefix={<UserOutlined />} placeholder=\"Email Id\" />\r\n                            </Form.Item>\r\n                            <Link onClick={() => this.props.history.goBack()}><h4 className=\"highlight-word\">Go Back ?</h4></Link>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" className=\"success-button float-right\">\r\n                                    Send OTP\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForgetPasswordPage;","import React from 'react';\r\nimport { message } from 'antd';\r\n\r\nconst ErrorNotification = (props) => {\r\n    return (\r\n       <React.Fragment>\r\n           {\r\n               message.error(props)\r\n           }\r\n       </React.Fragment>\r\n    )\r\n}\r\n\r\nconst SuccessNotification = (props) => {\r\n    return (\r\n       <React.Fragment>\r\n           {\r\n               message.success(props)\r\n           }\r\n       </React.Fragment>\r\n    )\r\n}\r\n\r\nexport { ErrorNotification, SuccessNotification }","import React, { Component } from 'react';\r\nimport { Row, Col, Input, Form, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport UserService from '../../../Services/UserService';\r\nimport { userServiceVariables } from '../../../Constants/ServiceConstants';\r\nimport { ErrorNotification } from '../../../Components/Toaster/toaster';\r\n\r\nclass SignUpPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.signupServive = new UserService();\r\n    }\r\n    \r\n    handleSignup =(value)=>{\r\n        this.signupServive.userService(userServiceVariables.Signup, value).then(res => {\r\n            this.props.history.push('/otp-verify', {email: res?.data?.userData[0]?.email})\r\n        }).catch(err => {\r\n            ErrorNotification(err.response.data.message)\r\n        })\r\n    }\r\n\r\n    signupError =() => {\r\n        console.log(\"called error\")\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Row justify=\"center\">\r\n                    <Col lg={8} className=\"custom-form\">\r\n                        <img src=\"logo.png\" alt=\"Second-App\" className=\"logo\" />\r\n                        <Form\r\n                            name=\"login\"\r\n                            initialValues={{ remember: true }}\r\n                            onFinish={this.handleSignup}\r\n                            onFinishFailed={this.signupError}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please Enter Email Id\"\r\n                                    },\r\n                                    {\r\n                                        type:'email',\r\n                                        message: \"Enter Email Id In Valid Format\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input prefix={<UserOutlined />} placeholder=\"Email Id\" />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                className=\" mb-0\"\r\n                                name=\"password\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please Enter Password\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    prefix={<LockOutlined />}\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />\r\n                            </Form.Item>\r\n                            <Link to=\"/login\"><h4 className=\"highlight-word pt-15\">Already Have A Account ?</h4></Link>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" className=\"success-button float-right\">\r\n                                    Create Account\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUpPage;","import React, { Component } from \"react\";\r\nimport { Form, Input, Row, Col, Button, Divider } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\n\r\nimport UserService from \"../../../Services/UserService\";\r\nimport { userServiceVariables } from \"../../../Constants/ServiceConstants\";\r\nimport {\r\n  ErrorNotification,\r\n  SuccessNotification,\r\n} from \"../../../Components/Toaster/toaster\";\r\n\r\nimport \"./login.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass LoginPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.userService = new UserService();\r\n    this.state = {\r\n      isLoading: false,\r\n    };\r\n  }\r\n\r\n  login = (value) => {\r\n    alert(\"called\");\r\n    this.setState({ isLoading: true });\r\n    this.userService\r\n      .userService(userServiceVariables.Login, value)\r\n      .then((res) => {\r\n        alert(\"called then\");\r\n        this.setState({ isLoading: false });\r\n        localStorage.setItem(\"User\", JSON.stringify(...res.data.user));\r\n        SuccessNotification(\"Welcome To My App\");\r\n        this.props.history.push(\"/dummy\");\r\n        console.log(\"called then\");\r\n      })\r\n      .catch((err) => {\r\n        alert(\"called catch\");\r\n        console.log(\"called catch\");\r\n        this.setState({ isLoading: false });\r\n        return ErrorNotification(err.response.data.message);\r\n      });\r\n  };\r\n\r\n  loginError = () => {\r\n    alert(\"called error\");\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row justify=\"center\">\r\n          <Col lg={8} className=\"custom-form\">\r\n            <img src=\"logo.png\" alt=\"Second-App\" className=\"logo\" />\r\n            <Form\r\n              name=\"login\"\r\n              initialValues={{ remember: true }}\r\n              onFinish={this.login}\r\n              onFinishFailed={this.loginError}\r\n            >\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Enter Email Id\",\r\n                  },\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Enter Email Id In Valid Format\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined />}\r\n                  placeholder=\"Email Id\"\r\n                  onChange={(e) => this.handleChange(e)}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                className=\" mb-0\"\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Enter Password\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<LockOutlined />}\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                />\r\n              </Form.Item>\r\n              <Link to=\"/forgot-password\">\r\n                <h4 className=\"highlight-word pt-15 float-right\">\r\n                  Forgot Password ?\r\n                </h4>\r\n              </Link>\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"success-button mt-15\"\r\n                  //   onClick={this.login}\r\n                  loading={this.state.isLoading}\r\n                >\r\n                  Log in\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n            <Divider type=\"horizontal\" />\r\n            <Link to=\"/signup\">\r\n              <h4 className=\"highlight-word\">Create New Account ?</h4>\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, { Component } from 'react'\r\nimport { Row, Col, Form, Button, InputNumber } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport UserService from '../../../Services/UserService';\r\nimport { userServiceVariables } from '../../../Constants/ServiceConstants';\r\nimport { ErrorNotification, SuccessNotification } from '../../../Components/Toaster/toaster';\r\n\r\nclass otpVerification extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.otpService = new UserService();\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.props?.location?.state?.email) {\r\n            this.props.history.goBack();\r\n        }\r\n    }\r\n\r\n    handleOtp = (value) => {\r\n        if(this.props.location.state.email) {\r\n            const data = {\r\n                otp: value.otp,\r\n                email: this.props.location.state.email\r\n            }\r\n            this.otpService.userService(userServiceVariables.Otp_Verification, data).then(res => {\r\n                SuccessNotification(\"Welcome To My App\");\r\n                localStorage.setItem('User', ...res.data.userDetails);\r\n                this.props.history.push('/dummy');\r\n            }).catch(err => {\r\n                ErrorNotification(err.response.data.message)\r\n            })\r\n        }\r\n    }\r\n\r\n    otpError = () => {\r\n        console.log(\"called error\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row justify=\"center\">\r\n                    <Col lg={8} className=\"custom-form\">\r\n                        <img src=\"logo.png\" alt=\"Second-App\" className=\"logo\" />\r\n                        <Form\r\n                            name=\"login\"\r\n                            initialValues={{ remember: true }}\r\n                            onFinish={this.handleOtp}\r\n                            onFinishFailed={this.otpError}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"otp\"\r\n                                rules={[\r\n                                    { type: 'number', message: \"Enter Numbers Only\"},\r\n                                    { required: true, message: \"Enter OTP\" }\r\n                                ]}\r\n                            >\r\n                                <InputNumber className=\"w-100\" placeholder=\"Enter OTP\" maxLength={6}  />\r\n                            </Form.Item>\r\n                            <Link onClick={() => this.props.history.goBack()}><h4 className=\"highlight-word\">Go Back ?</h4></Link>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" className=\"success-button float-right\">\r\n                                    Verify OTP\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default otpVerification;","import React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport DummyPage from '../Modules/Dummy/dummy';\r\nimport PageNotFound from '../Modules/PageNotFound/PageNotFound';\r\nimport ForgetPasswordPage from '../Modules/Users/ForgetPasswordPage/ForgetPassword';\r\nimport SignUpPage from '../Modules/Users/SignUpPage/signup';\r\nimport LoginPage from '../Modules/Users/LoginPage/login';\r\nimport otpVerification from '../Modules/Users/OtpVerification/otpVerification';\r\n\r\nconst MainRoutes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path='/otp-verify' component={otpVerification} />\r\n            <Route path='/forgot-password' component={ForgetPasswordPage} />\r\n            <Route path='/signup' component={SignUpPage} />\r\n            <Route path='/login' component={LoginPage} />\r\n            <Route path='/dummy' component={DummyPage} />\r\n            <Route path='' component={LoginPage} />\r\n            <Route path=\"*\" component={PageNotFound} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nconst AppRoutes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path='/dummy' component={DummyPage} />\r\n            <Route path='' component={LoginPage} />\r\n            <Route path=\"*\" component={DummyPage} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport { MainRoutes, AppRoutes };","import React, {Component} from 'react';\nimport { MainRoutes, AppRoutes } from './routes/routes';\nimport { withRouter } from 'react-router-dom';\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return(\n      true ? <MainRoutes /> : <AppRoutes />\n    )\n  }\n}\n\nconst RouteWithAuth = withRouter(App);\n\nexport default RouteWithAuth;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport RouteWithAuth from './App';\n\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <RouteWithAuth />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}